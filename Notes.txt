TestCafe
    - https://www.devexpress.com/products/testcafestudio/ (not open source)
    - TestCafe is a free and opensource NodeJS tool to automate e2e testing
        - It runs on Windows, macOS and Linux
    - It supports desktop, mobile, remote and cloud browsers
        - These can also be headless
        - Tests can also be ran in Javascript or Typescript
    - It is an alternative to other testing and automation solutions
    - It is easy to install with one command
    - It is a unique technology
        - It does not control the browser like Puppeteer/Webdriver
        - It is not a browser itself unlike cypress
    - The core is a proxy server which tansforms JS/HTML code to include automation code
    - There are several reasons to use TestCafe
        - Not having to worry about waiting for an element to load
        - Parallel testing in multiple browsers is simple
        - Supports BDD, data driven testing and Page Object Model
        - It is compatible with CI tools

End to End testing
    - This is also known as E2E testing
    - This is a technique to test whether an application flows from start to finish behaves as expected
    - These tests simulate real world user scenarios essentially testing an app how a real user would use the application
    - The purpose of performing E2E tests is to identify dependencies and to ensure data integrity is maintained between systems
    - The benefits of E2E testing are
        - Verification that the entire system is working properly
        - Prevention of bugs or regression issues
    - There are a few different components of TestCafe
        - Client-server
            - There is no external driver needed in TestCafe
            - This allows for cross browser and multi-platform testing
            - TestCafe uses a url rewriting proxy instead of WebDriver
            - This injects the driver script that emulates user actions into a test page
            - TestCafe uses 10.0.75.1 when testing
            - There are reasons for using a server in TestCafe
                - A database or web service can be launched from the tests
                - Access can be gotten to the server file system to read data samples or check uploads
                - Tests can make use of all Node.js features and external modules
                - Tests became faster and more stable as test logic is now separated from the automation scripts
                - Test code can't interrupt the page execution, because TestCafe doesn't inject user-written code
                - The latest syntax features like async/await are supported also with TestCafe
        - TestCafe API
            - Test code uses TestCafe API methods to interact with the tested page
            - There are 3 main types of interaction
                - Select Elements
                - Perform actions
                - Execute assertions
        - Page Proxying
        - Isolated Tests
            - TestCafe isolates each test run from subsequent tests and tests that run in parallel.
            - After a test is completed, TestCafe resets the browser state by
                - Deleting cookies
                - Clearing both local and session storage
                - Reloading the test page
    - TestCafe Studio vs Open-source TestCafe
        - TestCafe Studio is a cross-platform IDE for end-to-end testing or end-to-end web testing
        - It is also multi platform and works in every browser including mobile
        - It has a lot of features such as
            - Visual test recorder, Cross-browser testing and Comprehensive reports with powerful code editor

Install TestCafe
    - Needs to have NodeJS installed
    - VS is used but can be any text editor
    - To check npm version for installing packages
        - Enter the following command npm -v
    - Install the testcafe extensions available on the VSCode marketplace
    - Install the testcafe npm packages

TestCafe Example
    - Initial test examples will use the TestCafe demo site
    - This will be replaced by a more real world example later
    - It is important for testers to understand async\await in Javascript
        - https://www.freecodecamp.org/news/async-await-javascript-tutorial/
    - Async\Await is used by TestCafe in all cases
    - TestCafe tests must be organised into categories that are called fixtures
        - A JS/TS file with TestCafe tests can contain 1 or more fixtures
        - To declare a fixture simply use the fixture function
            - fixture 'Authentication Tests' .page 'url'
        - To create a test call the test function a pass a function which contains the test code
            - The test code function accepts the test controller objectas a parameter
                  fixture 'MyFixture';
                  test('Test1', async t => {
                    // Test 1 Code
                })
                  test('Test2', async t => {
                    // Test 2 Code
                })
            - 
    - Test controller 
        - A  test controller exposes the test API's methods and passing to each function that can run server-side test code.
        - Some examples of functions are  test, beforeEach or afterEach.
        - A test controller can be used to 
            - Call test actions
            - Handle browser dialogs
            - Use the wait functions
            - Execute assertions
        - The test runner also uses a test controller to access the internal context required for the test API to operate.

First Test
    - Added tests folder and firstTest.js
    - Need to prefix testcafe command with npx to run on Windows
    - This maybe because local installs are not added to the path

Using Selectors with Elements
    - The Selector API provides methods and properties to select elements on the page and get their state
    - TestCafe uses standard CSS selectors to locate elements
    - This is similar to using document.querySelector in JavaScript or FindElementBy.CSSSelector in Selenium Webdriver
    - In a test  before the fixture there is a need to import the selector from TestCafe
        - This is done using the import keyword
        - This will remove hardcoded selectors in the test script
        - An array can be used if there is a need to import different names.
    - Before the selector and after the import there can be constants added for the various selecor elements needed
        - These will replace the presently hardcoded values

Specify the Start Webpage
    - The URL is being passed with the fixture but can also be added with the test
        - The test url can differ from the fixture url
        - The fixture url can be set to something like a base page or base url 
        - This is similar to multiple other frameworks
    - The test url will be ran when specified ahead of the fixture url
        - This overrides the fixture specified url

Fixture and Test Metadata
    - TestCafe allows you to specify additional information for tests in the form of key-value metadata
    - You can display this information in the reports and use them to filter tests
        - One example is a command which runs tests whose metadata's device property is set to mobile, and env property is set to production
            - npx testcafe chrome my-tests --test-meta device=mobile,env=production
        - Again the npx is needed to run the tests on some Windows machines
    - Metadata can also  be defined for tests and fixtures
        - This uses fixture.meta and test.meta
    - To run a test file with specific environment such as production
        -  npx testcafe chrome .\tests\testMetaScript.js --test-meta env=production
        - Running the tests with the additional options will run both tests in the file rather than 1 which matches metadata

Interact with Page Elements
    - Navigate
        - TestCafe provides a set of actions that you can use to interact with the page including
            - Click, Navigate, Hover, Drag, Type text and more
        - This will navigate to the URL specified in the test fixture and then to the navigateTo URL
    - IFrame
        - This uses the IFrame test example found at -> http://the-internet.herokuapp.com/iframe
        - switchToIframe() switches the test's browsing context to the specified iFrame
        - switchToMainWindow() switches back to the main window from the IFrame
    - Dropdownlist & Upload file
        - How to select an option inside the drop-down list
        - There are usually 2 things to do in TestCafe with dropdown lists
            - Get the dropdown list to drop and then select an option
        - Again using the internet.herokuapp.com site for uploading an image
            - https://the-internet.herokuapp.com/upload
        - Uploading a file in TestCafe is done using setFilesToUpload() function
            - This needs to have a path to the file(s) to be uploaded
            - setFilesToUpload() with TestCafe automatically waits until the file is uploaded to the server
            - This means that there are no additional commands or libraries needed
            - Uploads can also be cleared with one function -> clearUpload()
                - This removes all the file paths from the specific file upload input
    - Set Test Speed
        - Tests can be ran very quickly which may not give time to see what is occurring
        - This is why there is a need to be able to reduce test speed
        - This makes use of the setTestSpeed method
    - Set Page Timeout
        - setPageLoadTimeout() specifies the amount of time within which TestCafe waits for the window.load event to fire before starting the test
    - Drag & Hover
        - drag an element to a specific offset using TestCafe
        - Example is a slider and it will be able to be dragged to a specific offset
        - This makes use of the drag() command from TestCafe
        - drag uses different offsets of X and Y of the mouse pointer
        - Hover -> hovers a mouse pointer over a webpage element

 Hooks 
    -  What are TestCafe Hooks
        - TestCafe allows you to specify functions that are executed before a fixture or a test is started or after it's finished. 
        - Test hooks override fixture hooks
        - If a test runs in several browsers then the test hooks are executed in each browser
        - A hook can be specified for each test in a fixture with the fixture.beforeEach or fixture.afterEach methods

Assertions
    - TestCafe provides a comprehensive set of assertions
    - These are based on a behavior-driven development style or BDD style
    - In order to construct assertions the expected method of the test controller is used
    - In assertions the check is that the actual results are equal to the expected one
    - The equal() function is used
        - This takes the parameters expected, message, and options if we wanted to add anything else
        - The assertion query timeout can be specified in test code, with the options.timeout option
        - The assertion can only be tried or a timeout can be with the assertions, with options to timeout
    - There are different and a huge number of assertions methods with TestCafe including
        - ok, not ok
        - match, not match
        - within, not within
        - type of, not type of
        - contains, not contains

Skip Test
    - An additional feature with TestCafe is the ability to skip tests with one single configuration
    - Use the fixture.skip and test.skip methods for this
    - Also use fixture.only and test.only methods to specify that only a particular test or fixture should run while all the others should be skipped
    
Working with client-side information
    - TestCafe allows for creating client functions that can return any serializable value from the client-side
        - This can be a current URL or custom data calculated by a client script
    - TestCafe has ClientFunction which needs to be imported like Selector
    - Using ClientFunction it is necessary to get window.location.href
        - This will always contains the current URL from the browser

Test execution
    - TestCafe is designed to support most modern browsers
    - TestCafe automatically detects the popular browsers installed on a local computer
        - It is actively tested with 
            - Chrome with different versions, IE 11 +, Edge (legacy\chromium based), Safari, Firefox, Mobile (Saferi\Chrome)
    - To see which browsers are supported
        - testcafe --list-browsers
    - To run tests on all the local browsers using the following command
        - testcafe all tests
    - To run test on multiple browsers together
        - testcafe firefox,chrome,safari tests/firstTest.js

Run Tests in Parallel
    - TestCafe allows for executing tests concurrently
    - In concurrent mode, TestCafe invokes multiple instances of each browser
        - These instances constitute the pool of browsers against which tests run concurrently
        - For example, each test runs in the first available instance
    - To enable using concurrency use -c or --concurrency at the command line
        - npx testcafe -c 5 chrome .\tests\testOnlyTest.js
        - This invokes 5 instances of Chrome and runs the tests concurrently
    - TestCafe concurrenncy means running or splitting the test with different concurrency
        - This is not repeating the test with the same or with each instance
    - Concurrency can also be used with testing against multiple browsers
        - npx testcafe -c 5 chrome,firefox .\tests\testOnlyTest.js
    - Live Mode
        - Live mode ensures TestCafe and the browsers remain active while working on tests
    - Use -L or --live flag to enable live mode from the command line interface
        - npx testcafe chrome .\tests\testOnlyTest.js -L
    - After entering the test to be ran in live mode there are some commands available
        - Ctrl+S to stop the test run
        - Ctrl+R to restart the test run
        - Ctrl+W to enable or disable watching files
        - Ctrl+C to quit the live mode and close the browsers
    - With live mode, changes can be made to anything in the script, and after that, the test will run again automatically and take the change
    - Concurrent test execution is not supported in Microsoft Edge

Filter Tests By Metadata & Name
    - Tests and fixtures can be filtered by metadata
        - testcafe chrome ./tests/ --fixture-meta device=mobile,env=production
            - To filter fixtures with specific data, use the --fixture-meta argument
        - testcafe chrome tests/testMetaScript.js --test-meta env=production
            - runs the specified test 
    - Tests and fixtures can also be ran by name
        - testcafe safari ./tests/HooksTest.js -t "First Test"
        - The t option is added to add a test by name which is specified in a string at the end of the command
        - This can also be done in the runner.filter method

Headless Mode
    - Headless mode can be very useful when running CI servers
    - This consumes less resources as there is no GUI
    - Use the :headless parameter to launch a browser in headless mode.
    - This can be ran with either firefox or chrome
        - testcafe chrome:headless tests/firstTest.js
        - testcafe firefox:headless tests/firstTest.js
    - Headless is not available with Safari
    -
